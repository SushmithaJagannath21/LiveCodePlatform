{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n  return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport class ConfigurationModel {\n  static createEmptyModel(logService) {\n    return new ConfigurationModel({}, [], [], undefined, logService);\n  }\n  constructor(_contents, _keys, _overrides, raw, logService) {\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.raw = raw;\n    this.logService = logService;\n    this.overrideConfigurations = new Map();\n  }\n  get rawConfiguration() {\n    var _a;\n    if (!this._rawConfiguration) {\n      if ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) {\n        const rawConfigurationModels = this.raw.map(raw => {\n          if (raw instanceof ConfigurationModel) {\n            return raw;\n          }\n          const parser = new ConfigurationModelParser('', this.logService);\n          parser.parseRaw(raw);\n          return parser.configurationModel;\n        });\n        this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);\n      } else {\n        // raw is same as current\n        this._rawConfiguration = this;\n      }\n    }\n    return this._rawConfiguration;\n  }\n  get contents() {\n    return this._contents;\n  }\n  get overrides() {\n    return this._overrides;\n  }\n  get keys() {\n    return this._keys;\n  }\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n  inspect(section, overrideIdentifier) {\n    const that = this;\n    return {\n      get value() {\n        return freeze(that.rawConfiguration.getValue(section));\n      },\n      get override() {\n        return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n      },\n      get merged() {\n        return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n      },\n      get overrides() {\n        const overrides = [];\n        for (const {\n          contents,\n          identifiers,\n          keys\n        } of that.rawConfiguration.overrides) {\n          const value = new ConfigurationModel(contents, keys, [], undefined, that.logService).getValue(section);\n          if (value !== undefined) {\n            overrides.push({\n              identifiers,\n              value\n            });\n          }\n        }\n        return overrides.length ? freeze(overrides) : undefined;\n      }\n    };\n  }\n  getOverrideValue(section, overrideIdentifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n    return overrideContents ? section ? getConfigurationValue(overrideContents, section) : overrideContents : undefined;\n  }\n  override(identifier) {\n    let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n    if (!overrideConfigurationModel) {\n      overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n      this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n    }\n    return overrideConfigurationModel;\n  }\n  merge(...others) {\n    var _a, _b;\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n    const raws = ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) ? [...this.raw] : [this];\n    for (const other of others) {\n      raws.push(...(((_b = other.raw) === null || _b === void 0 ? void 0 : _b.length) ? other.raw : [other]));\n      if (other.isEmpty()) {\n        continue;\n      }\n      this.mergeContents(contents, other.contents);\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n          override.keys.push(...otherOverride.keys);\n          override.keys = arrays.distinct(override.keys);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n    return new ConfigurationModel(contents, keys, overrides, raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws, this.logService);\n  }\n  createOverrideConfigurationModel(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n    const contents = {};\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      const overrideContentsForKey = overrideContents[key];\n      // If there are override contents for the key, clone and merge otherwise use base contents\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n      contents[key] = contentsForKey;\n    }\n    return new ConfigurationModel(contents, this.keys, this.overrides, undefined, this.logService);\n  }\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n  getContentsForOverrideIdentifer(identifier) {\n    let contentsForIdentifierOnly = null;\n    let contents = null;\n    const mergeContents = contentsToMerge => {\n      if (contentsToMerge) {\n        if (contents) {\n          this.mergeContents(contents, contentsToMerge);\n        } else {\n          contents = objects.deepClone(contentsToMerge);\n        }\n      }\n    };\n    for (const override of this.overrides) {\n      if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n        contentsForIdentifierOnly = override.contents;\n      } else if (override.identifiers.includes(identifier)) {\n        mergeContents(override.contents);\n      }\n    }\n    // Merge contents of the identifier only at the end to take precedence.\n    mergeContents(contentsForIdentifierOnly);\n    return contents;\n  }\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  }\n  // Update methods\n  addValue(key, value) {\n    this.updateValue(key, value, true);\n  }\n  setValue(key, value) {\n    this.updateValue(key, value, false);\n  }\n  removeValue(key) {\n    const index = this.keys.indexOf(key);\n    if (index === -1) {\n      return;\n    }\n    this.keys.splice(index, 1);\n    removeFromValueTree(this.contents, key);\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n      this.overrides.splice(this.overrides.findIndex(o => arrays.equals(o.identifiers, overrideIdentifiersFromKey(key))), 1);\n    }\n  }\n  updateValue(key, value, add) {\n    addToValueTree(this.contents, key, value, e => this.logService.error(e));\n    add = add || this.keys.indexOf(key) === -1;\n    if (add) {\n      this.keys.push(key);\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n      this.overrides.push({\n        identifiers: overrideIdentifiersFromKey(key),\n        keys: Object.keys(this.contents[key]),\n        contents: toValuesTree(this.contents[key], message => this.logService.error(message))\n      });\n    }\n  }\n}\nexport class ConfigurationModelParser {\n  constructor(_name, logService) {\n    this._name = _name;\n    this.logService = logService;\n    this._raw = null;\n    this._configurationModel = null;\n    this._restrictedConfigurations = [];\n  }\n  get configurationModel() {\n    return this._configurationModel || ConfigurationModel.createEmptyModel(this.logService);\n  }\n  parseRaw(raw, options) {\n    this._raw = raw;\n    const {\n      contents,\n      keys,\n      overrides,\n      restricted,\n      hasExcludedProperties\n    } = this.doParseRaw(raw, options);\n    this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */, this.logService);\n    this._restrictedConfigurations = restricted || [];\n  }\n  doParseRaw(raw, options) {\n    const configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n    const filtered = this.filter(raw, configurationProperties, true, options);\n    raw = filtered.raw;\n    const contents = toValuesTree(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n    const keys = Object.keys(raw);\n    const overrides = this.toOverrides(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n    return {\n      contents,\n      keys,\n      overrides,\n      restricted: filtered.restricted,\n      hasExcludedProperties: filtered.hasExcludedProperties\n    };\n  }\n  filter(properties, configurationProperties, filterOverriddenProperties, options) {\n    var _a, _b, _c;\n    let hasExcludedProperties = false;\n    if (!(options === null || options === void 0 ? void 0 : options.scopes) && !(options === null || options === void 0 ? void 0 : options.skipRestricted) && !((_a = options === null || options === void 0 ? void 0 : options.exclude) === null || _a === void 0 ? void 0 : _a.length)) {\n      return {\n        raw: properties,\n        restricted: [],\n        hasExcludedProperties\n      };\n    }\n    const raw = {};\n    const restricted = [];\n    for (const key in properties) {\n      if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n        const result = this.filter(properties[key], configurationProperties, false, options);\n        raw[key] = result.raw;\n        hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n        restricted.push(...result.restricted);\n      } else {\n        const propertySchema = configurationProperties[key];\n        const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n        if (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted) {\n          restricted.push(key);\n        }\n        if (!((_b = options.exclude) === null || _b === void 0 ? void 0 : _b.includes(key)) /* Check exclude */ && (((_c = options.include) === null || _c === void 0 ? void 0 : _c.includes(key) /* Check include */) || (scope === undefined || options.scopes === undefined || options.scopes.includes(scope) /* Check scopes */) && !(options.skipRestricted && (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted)))) /* Check restricted */{\n            raw[key] = properties[key];\n          } else {\n          hasExcludedProperties = true;\n        }\n      }\n    }\n    return {\n      raw,\n      restricted,\n      hasExcludedProperties\n    };\n  }\n  toOverrides(raw, conflictReporter) {\n    const overrides = [];\n    for (const key of Object.keys(raw)) {\n      if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        const overrideRaw = {};\n        for (const keyInOverrideRaw in raw[key]) {\n          overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n        }\n        overrides.push({\n          identifiers: overrideIdentifiersFromKey(key),\n          keys: Object.keys(overrideRaw),\n          contents: toValuesTree(overrideRaw, conflictReporter)\n        });\n      }\n    }\n    return overrides;\n  }\n}\nclass ConfigurationInspectValue {\n  constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n    this.key = key;\n    this.overrides = overrides;\n    this._value = _value;\n    this.overrideIdentifiers = overrideIdentifiers;\n    this.defaultConfiguration = defaultConfiguration;\n    this.policyConfiguration = policyConfiguration;\n    this.applicationConfiguration = applicationConfiguration;\n    this.userConfiguration = userConfiguration;\n    this.localUserConfiguration = localUserConfiguration;\n    this.remoteUserConfiguration = remoteUserConfiguration;\n    this.workspaceConfiguration = workspaceConfiguration;\n    this.folderConfigurationModel = folderConfigurationModel;\n    this.memoryConfigurationModel = memoryConfigurationModel;\n  }\n  toInspectValue(inspectValue) {\n    return (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.value) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.override) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.overrides) !== undefined ? inspectValue : undefined;\n  }\n  get userInspectValue() {\n    if (!this._userInspectValue) {\n      this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n    }\n    return this._userInspectValue;\n  }\n  get user() {\n    return this.toInspectValue(this.userInspectValue);\n  }\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, logService) {\n    this._defaultConfiguration = _defaultConfiguration;\n    this._policyConfiguration = _policyConfiguration;\n    this._applicationConfiguration = _applicationConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this.logService = logService;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n  updateValue(key, value, overrides = {}) {\n    let memoryConfiguration;\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n      if (!memoryConfiguration) {\n        memoryConfiguration = ConfigurationModel.createEmptyModel(this.logService);\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n  inspect(key, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n    const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n    const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n    const overrideIdentifiers = new Set();\n    for (const override of consolidateConfigurationModel.overrides) {\n      for (const overrideIdentifier of override.identifiers) {\n        if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n          overrideIdentifiers.add(overrideIdentifier);\n        }\n      }\n    }\n    return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? [...overrideIdentifiers] : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n  }\n  get applicationConfiguration() {\n    return this._applicationConfiguration;\n  }\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n    }\n    return this._userConfiguration;\n  }\n  get localUserConfiguration() {\n    return this._localUserConfiguration;\n  }\n  get remoteUserConfiguration() {\n    return this._remoteUserConfiguration;\n  }\n  getConsolidatedConfigurationModel(section, overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    if (overrides.overrideIdentifier) {\n      configurationModel = configurationModel.override(overrides.overrideIdentifier);\n    }\n    if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n      configurationModel = configurationModel.merge(this._policyConfiguration);\n    }\n    return configurationModel;\n  }\n  getConsolidatedConfigurationModelForResource({\n    resource\n  }, workspace) {\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n    return consolidateConfiguration;\n  }\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n    }\n    return this._workspaceConsolidatedConfiguration;\n  }\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n      const folderConfiguration = this._folderConfigurations.get(folder);\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n    return folderConsolidatedConfiguration;\n  }\n  getFolderConfigurationModelForResource(resource, workspace) {\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        return this._folderConfigurations.get(root.uri);\n      }\n    }\n    return undefined;\n  }\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      policy: {\n        contents: this._policyConfiguration.contents,\n        overrides: this._policyConfiguration.overrides,\n        keys: this._policyConfiguration.keys\n      },\n      application: {\n        contents: this.applicationConfiguration.contents,\n        overrides: this.applicationConfiguration.overrides,\n        keys: this.applicationConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n  static parse(data, logService) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults, logService);\n    const policyConfiguration = this.parseConfigurationModel(data.policy, logService);\n    const applicationConfiguration = this.parseConfigurationModel(data.application, logService);\n    const userConfiguration = this.parseConfigurationModel(data.user, logService);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace, logService);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1], logService));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, ConfigurationModel.createEmptyModel(logService), workspaceConfiguration, folders, ConfigurationModel.createEmptyModel(logService), new ResourceMap(), logService);\n  }\n  static parseConfigurationModel(model, logService) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides, undefined, logService);\n  }\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace, logService) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this.logService = logService;\n    this._marker = '\\n';\n    this._markerCode1 = this._marker.charCodeAt(0);\n    this._markerCode2 = '.'.charCodeAt(0);\n    this.affectedKeys = new Set();\n    this._previousConfiguration = undefined;\n    for (const key of change.keys) {\n      this.affectedKeys.add(key);\n    }\n    for (const [, keys] of change.overrides) {\n      for (const key of keys) {\n        this.affectedKeys.add(key);\n      }\n    }\n    // Example: '\\nfoo.bar\\nabc.def\\n'\n    this._affectsConfigStr = this._marker;\n    for (const key of this.affectedKeys) {\n      this._affectsConfigStr += key + this._marker;\n    }\n  }\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data, this.logService);\n    }\n    return this._previousConfiguration;\n  }\n  affectsConfiguration(section, overrides) {\n    var _a;\n    // we have one large string with all keys that have changed. we pad (marker) the section\n    // and check that either find it padded or before a segment character\n    const needle = this._marker + section;\n    const idx = this._affectsConfigStr.indexOf(needle);\n    if (idx < 0) {\n      // NOT: (marker + section)\n      return false;\n    }\n    const pos = idx + needle.length;\n    if (pos >= this._affectsConfigStr.length) {\n      return false;\n    }\n    const code = this._affectsConfigStr.charCodeAt(pos);\n    if (code !== this._markerCode1 && code !== this._markerCode2) {\n      // NOT: section + (marker | segment)\n      return false;\n    }\n    if (overrides) {\n      const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n      const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n      return !objects.equals(value1, value2);\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationValue","removeFromValueTree","toValuesTree","Extensions","overrideIdentifiersFromKey","OVERRIDE_PROPERTY_REGEX","Registry","freeze","data","Object","isFrozen","deepFreeze","ConfigurationModel","createEmptyModel","logService","undefined","constructor","_contents","_keys","_overrides","raw","overrideConfigurations","Map","rawConfiguration","_a","_rawConfiguration","length","rawConfigurationModels","map","parser","ConfigurationModelParser","parseRaw","configurationModel","reduce","previous","current","merge","contents","overrides","keys","isEmpty","getValue","section","inspect","overrideIdentifier","that","value","override","getOverrideValue","merged","identifiers","push","overrideContents","getContentsForOverrideIdentifer","identifier","overrideConfigurationModel","get","createOverrideConfigurationModel","set","others","_b","deepClone","raws","other","mergeContents","otherOverride","filter","o","equals","distinct","key","indexOf","every","contentsForKey","overrideContentsForKey","source","target","isObject","contentsForIdentifierOnly","contentsToMerge","includes","toJSON","addValue","updateValue","setValue","removeValue","index","splice","test","findIndex","add","e","error","message","_name","_raw","_configurationModel","_restrictedConfigurations","options","restricted","hasExcludedProperties","doParseRaw","configurationProperties","as","Configuration","getConfigurationProperties","filtered","toOverrides","properties","filterOverriddenProperties","_c","scopes","skipRestricted","exclude","result","propertySchema","scope","include","conflictReporter","overrideRaw","keyInOverrideRaw","ConfigurationInspectValue","_value","overrideIdentifiers","defaultConfiguration","policyConfiguration","applicationConfiguration","userConfiguration","localUserConfiguration","remoteUserConfiguration","workspaceConfiguration","folderConfigurationModel","memoryConfigurationModel","toInspectValue","inspectValue","userInspectValue","_userInspectValue","user","_defaultConfiguration","_policyConfiguration","_applicationConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidatedConfigurationModel","memoryConfiguration","resource","getFolderConfigurationModelForResource","Set","size","getConsolidatedConfigurationModelForResource","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","policy","application","folders","parse","parseConfigurationModel","revive","model","ConfigurationChangeEvent","change","currentConfiguraiton","currentWorkspace","_marker","_markerCode1","charCodeAt","_markerCode2","affectedKeys","_previousConfiguration","_affectsConfigStr","previousConfiguration","affectsConfiguration","needle","idx","pos","code","value1","value2"],"sources":["/Users/sushmithajagannath/collaborative-code-editor/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n    return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport class ConfigurationModel {\n    static createEmptyModel(logService) {\n        return new ConfigurationModel({}, [], [], undefined, logService);\n    }\n    constructor(_contents, _keys, _overrides, raw, logService) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.raw = raw;\n        this.logService = logService;\n        this.overrideConfigurations = new Map();\n    }\n    get rawConfiguration() {\n        var _a;\n        if (!this._rawConfiguration) {\n            if ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) {\n                const rawConfigurationModels = this.raw.map(raw => {\n                    if (raw instanceof ConfigurationModel) {\n                        return raw;\n                    }\n                    const parser = new ConfigurationModelParser('', this.logService);\n                    parser.parseRaw(raw);\n                    return parser.configurationModel;\n                });\n                this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);\n            }\n            else {\n                // raw is same as current\n                this._rawConfiguration = this;\n            }\n        }\n        return this._rawConfiguration;\n    }\n    get contents() {\n        return this._contents;\n    }\n    get overrides() {\n        return this._overrides;\n    }\n    get keys() {\n        return this._keys;\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    inspect(section, overrideIdentifier) {\n        const that = this;\n        return {\n            get value() {\n                return freeze(that.rawConfiguration.getValue(section));\n            },\n            get override() {\n                return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n            },\n            get merged() {\n                return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n            },\n            get overrides() {\n                const overrides = [];\n                for (const { contents, identifiers, keys } of that.rawConfiguration.overrides) {\n                    const value = new ConfigurationModel(contents, keys, [], undefined, that.logService).getValue(section);\n                    if (value !== undefined) {\n                        overrides.push({ identifiers, value });\n                    }\n                }\n                return overrides.length ? freeze(overrides) : undefined;\n            }\n        };\n    }\n    getOverrideValue(section, overrideIdentifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n        return overrideContents\n            ? section ? getConfigurationValue(overrideContents, section) : overrideContents\n            : undefined;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        var _a, _b;\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        const raws = ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) ? [...this.raw] : [this];\n        for (const other of others) {\n            raws.push(...(((_b = other.raw) === null || _b === void 0 ? void 0 : _b.length) ? other.raw : [other]));\n            if (other.isEmpty()) {\n                continue;\n            }\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                    override.keys.push(...otherOverride.keys);\n                    override.keys = arrays.distinct(override.keys);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides, raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws, this.logService);\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        const contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            const overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides, undefined, this.logService);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        let contentsForIdentifierOnly = null;\n        let contents = null;\n        const mergeContents = (contentsToMerge) => {\n            if (contentsToMerge) {\n                if (contents) {\n                    this.mergeContents(contents, contentsToMerge);\n                }\n                else {\n                    contents = objects.deepClone(contentsToMerge);\n                }\n            }\n        };\n        for (const override of this.overrides) {\n            if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n                contentsForIdentifierOnly = override.contents;\n            }\n            else if (override.identifiers.includes(identifier)) {\n                mergeContents(override.contents);\n            }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n        mergeContents(contentsForIdentifierOnly);\n        return contents;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    // Update methods\n    addValue(key, value) {\n        this.updateValue(key, value, true);\n    }\n    setValue(key, value) {\n        this.updateValue(key, value, false);\n    }\n    removeValue(key) {\n        const index = this.keys.indexOf(key);\n        if (index === -1) {\n            return;\n        }\n        this.keys.splice(index, 1);\n        removeFromValueTree(this.contents, key);\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            this.overrides.splice(this.overrides.findIndex(o => arrays.equals(o.identifiers, overrideIdentifiersFromKey(key))), 1);\n        }\n    }\n    updateValue(key, value, add) {\n        addToValueTree(this.contents, key, value, e => this.logService.error(e));\n        add = add || this.keys.indexOf(key) === -1;\n        if (add) {\n            this.keys.push(key);\n        }\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            this.overrides.push({\n                identifiers: overrideIdentifiersFromKey(key),\n                keys: Object.keys(this.contents[key]),\n                contents: toValuesTree(this.contents[key], message => this.logService.error(message)),\n            });\n        }\n    }\n}\nexport class ConfigurationModelParser {\n    constructor(_name, logService) {\n        this._name = _name;\n        this.logService = logService;\n        this._raw = null;\n        this._configurationModel = null;\n        this._restrictedConfigurations = [];\n    }\n    get configurationModel() {\n        return this._configurationModel || ConfigurationModel.createEmptyModel(this.logService);\n    }\n    parseRaw(raw, options) {\n        this._raw = raw;\n        const { contents, keys, overrides, restricted, hasExcludedProperties } = this.doParseRaw(raw, options);\n        this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */, this.logService);\n        this._restrictedConfigurations = restricted || [];\n    }\n    doParseRaw(raw, options) {\n        const configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n        const filtered = this.filter(raw, configurationProperties, true, options);\n        raw = filtered.raw;\n        const contents = toValuesTree(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n        const keys = Object.keys(raw);\n        const overrides = this.toOverrides(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n        return { contents, keys, overrides, restricted: filtered.restricted, hasExcludedProperties: filtered.hasExcludedProperties };\n    }\n    filter(properties, configurationProperties, filterOverriddenProperties, options) {\n        var _a, _b, _c;\n        let hasExcludedProperties = false;\n        if (!(options === null || options === void 0 ? void 0 : options.scopes) && !(options === null || options === void 0 ? void 0 : options.skipRestricted) && !((_a = options === null || options === void 0 ? void 0 : options.exclude) === null || _a === void 0 ? void 0 : _a.length)) {\n            return { raw: properties, restricted: [], hasExcludedProperties };\n        }\n        const raw = {};\n        const restricted = [];\n        for (const key in properties) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n                const result = this.filter(properties[key], configurationProperties, false, options);\n                raw[key] = result.raw;\n                hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n                restricted.push(...result.restricted);\n            }\n            else {\n                const propertySchema = configurationProperties[key];\n                const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n                if (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted) {\n                    restricted.push(key);\n                }\n                if (!((_b = options.exclude) === null || _b === void 0 ? void 0 : _b.includes(key)) /* Check exclude */\n                    && (((_c = options.include) === null || _c === void 0 ? void 0 : _c.includes(key) /* Check include */)\n                        || ((scope === undefined || options.scopes === undefined || options.scopes.includes(scope)) /* Check scopes */\n                            && !(options.skipRestricted && (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted))))) /* Check restricted */ {\n                    raw[key] = properties[key];\n                }\n                else {\n                    hasExcludedProperties = true;\n                }\n            }\n        }\n        return { raw, restricted, hasExcludedProperties };\n    }\n    toOverrides(raw, conflictReporter) {\n        const overrides = [];\n        for (const key of Object.keys(raw)) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                const overrideRaw = {};\n                for (const keyInOverrideRaw in raw[key]) {\n                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n                }\n                overrides.push({\n                    identifiers: overrideIdentifiersFromKey(key),\n                    keys: Object.keys(overrideRaw),\n                    contents: toValuesTree(overrideRaw, conflictReporter)\n                });\n            }\n        }\n        return overrides;\n    }\n}\nclass ConfigurationInspectValue {\n    constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n        this.key = key;\n        this.overrides = overrides;\n        this._value = _value;\n        this.overrideIdentifiers = overrideIdentifiers;\n        this.defaultConfiguration = defaultConfiguration;\n        this.policyConfiguration = policyConfiguration;\n        this.applicationConfiguration = applicationConfiguration;\n        this.userConfiguration = userConfiguration;\n        this.localUserConfiguration = localUserConfiguration;\n        this.remoteUserConfiguration = remoteUserConfiguration;\n        this.workspaceConfiguration = workspaceConfiguration;\n        this.folderConfigurationModel = folderConfigurationModel;\n        this.memoryConfigurationModel = memoryConfigurationModel;\n    }\n    toInspectValue(inspectValue) {\n        return (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.value) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.override) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.overrides) !== undefined ? inspectValue : undefined;\n    }\n    get userInspectValue() {\n        if (!this._userInspectValue) {\n            this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n        }\n        return this._userInspectValue;\n    }\n    get user() {\n        return this.toInspectValue(this.userInspectValue);\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, logService) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._policyConfiguration = _policyConfiguration;\n        this._applicationConfiguration = _applicationConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this.logService = logService;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = ConfigurationModel.createEmptyModel(this.logService);\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    inspect(key, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        const overrideIdentifiers = new Set();\n        for (const override of consolidateConfigurationModel.overrides) {\n            for (const overrideIdentifier of override.identifiers) {\n                if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n                    overrideIdentifiers.add(overrideIdentifier);\n                }\n            }\n        }\n        return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? [...overrideIdentifiers] : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n    }\n    get applicationConfiguration() {\n        return this._applicationConfiguration;\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n        }\n        return this._userConfiguration;\n    }\n    get localUserConfiguration() {\n        return this._localUserConfiguration;\n    }\n    get remoteUserConfiguration() {\n        return this._remoteUserConfiguration;\n    }\n    getConsolidatedConfigurationModel(section, overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        if (overrides.overrideIdentifier) {\n            configurationModel = configurationModel.override(overrides.overrideIdentifier);\n        }\n        if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n            configurationModel = configurationModel.merge(this._policyConfiguration);\n        }\n        return configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    getFolderConfigurationModelForResource(resource, workspace) {\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                return this._folderConfigurations.get(root.uri);\n            }\n        }\n        return undefined;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            policy: {\n                contents: this._policyConfiguration.contents,\n                overrides: this._policyConfiguration.overrides,\n                keys: this._policyConfiguration.keys\n            },\n            application: {\n                contents: this.applicationConfiguration.contents,\n                overrides: this.applicationConfiguration.overrides,\n                keys: this.applicationConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data, logService) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults, logService);\n        const policyConfiguration = this.parseConfigurationModel(data.policy, logService);\n        const applicationConfiguration = this.parseConfigurationModel(data.application, logService);\n        const userConfiguration = this.parseConfigurationModel(data.user, logService);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace, logService);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1], logService));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, ConfigurationModel.createEmptyModel(logService), workspaceConfiguration, folders, ConfigurationModel.createEmptyModel(logService), new ResourceMap(), logService);\n    }\n    static parseConfigurationModel(model, logService) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides, undefined, logService);\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace, logService) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this.logService = logService;\n        this._marker = '\\n';\n        this._markerCode1 = this._marker.charCodeAt(0);\n        this._markerCode2 = '.'.charCodeAt(0);\n        this.affectedKeys = new Set();\n        this._previousConfiguration = undefined;\n        for (const key of change.keys) {\n            this.affectedKeys.add(key);\n        }\n        for (const [, keys] of change.overrides) {\n            for (const key of keys) {\n                this.affectedKeys.add(key);\n            }\n        }\n        // Example: '\\nfoo.bar\\nabc.def\\n'\n        this._affectsConfigStr = this._marker;\n        for (const key of this.affectedKeys) {\n            this._affectsConfigStr += key + this._marker;\n        }\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data, this.logService);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        var _a;\n        // we have one large string with all keys that have changed. we pad (marker) the section\n        // and check that either find it padded or before a segment character\n        const needle = this._marker + section;\n        const idx = this._affectsConfigStr.indexOf(needle);\n        if (idx < 0) {\n            // NOT: (marker + section)\n            return false;\n        }\n        const pos = idx + needle.length;\n        if (pos >= this._affectsConfigStr.length) {\n            return false;\n        }\n        const code = this._affectsConfigStr.charCodeAt(pos);\n        if (code !== this._markerCode1 && code !== this._markerCode2) {\n            // NOT: section + (marker | segment)\n            return false;\n        }\n        if (overrides) {\n            const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n            const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n            return !objects.equals(value1, value2);\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}