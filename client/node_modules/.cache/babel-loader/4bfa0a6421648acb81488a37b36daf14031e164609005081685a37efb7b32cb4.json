{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from './cancellation.js';\nimport { BugIndicatingError, CancellationError } from './errors.js';\nimport { Emitter, Event } from './event.js';\nimport { toDisposable } from './lifecycle.js';\nimport { setTimeout0 } from './platform.js';\nimport { MicrotaskDelay } from './symbols.js';\nexport function isThenable(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\nexport function createCancelablePromise(callback) {\n  const source = new CancellationTokenSource();\n  const thenable = callback(source.token);\n  const promise = new Promise((resolve, reject) => {\n    const subscription = source.token.onCancellationRequested(() => {\n      subscription.dispose();\n      reject(new CancellationError());\n    });\n    Promise.resolve(thenable).then(value => {\n      subscription.dispose();\n      source.dispose();\n      resolve(value);\n    }, err => {\n      subscription.dispose();\n      source.dispose();\n      reject(err);\n    });\n  });\n  return new class {\n    cancel() {\n      source.cancel();\n      source.dispose();\n    }\n    then(resolve, reject) {\n      return promise.then(resolve, reject);\n    }\n    catch(reject) {\n      return this.then(undefined, reject);\n    }\n    finally(onfinally) {\n      return promise.finally(onfinally);\n    }\n  }();\n}\nexport function raceCancellation(promise, token, defaultValue) {\n  return new Promise((resolve, reject) => {\n    const ref = token.onCancellationRequested(() => {\n      ref.dispose();\n      resolve(defaultValue);\n    });\n    promise.then(resolve, reject).finally(() => ref.dispose());\n  });\n}\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n  constructor() {\n    this.isDisposed = false;\n    this.activePromise = null;\n    this.queuedPromise = null;\n    this.queuedPromiseFactory = null;\n  }\n  queue(promiseFactory) {\n    if (this.isDisposed) {\n      return Promise.reject(new Error('Throttler is disposed'));\n    }\n    if (this.activePromise) {\n      this.queuedPromiseFactory = promiseFactory;\n      if (!this.queuedPromise) {\n        const onComplete = () => {\n          this.queuedPromise = null;\n          if (this.isDisposed) {\n            return;\n          }\n          const result = this.queue(this.queuedPromiseFactory);\n          this.queuedPromiseFactory = null;\n          return result;\n        };\n        this.queuedPromise = new Promise(resolve => {\n          this.activePromise.then(onComplete, onComplete).then(resolve);\n        });\n      }\n      return new Promise((resolve, reject) => {\n        this.queuedPromise.then(resolve, reject);\n      });\n    }\n    this.activePromise = promiseFactory();\n    return new Promise((resolve, reject) => {\n      this.activePromise.then(result => {\n        this.activePromise = null;\n        resolve(result);\n      }, err => {\n        this.activePromise = null;\n        reject(err);\n      });\n    });\n  }\n  dispose() {\n    this.isDisposed = true;\n  }\n}\nconst timeoutDeferred = (timeout, fn) => {\n  let scheduled = true;\n  const handle = setTimeout(() => {\n    scheduled = false;\n    fn();\n  }, timeout);\n  return {\n    isTriggered: () => scheduled,\n    dispose: () => {\n      clearTimeout(handle);\n      scheduled = false;\n    }\n  };\n};\nconst microtaskDeferred = fn => {\n  let scheduled = true;\n  queueMicrotask(() => {\n    if (scheduled) {\n      scheduled = false;\n      fn();\n    }\n  });\n  return {\n    isTriggered: () => scheduled,\n    dispose: () => {\n      scheduled = false;\n    }\n  };\n};\n/**\n * A helper to delay (debounce) execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer {\n  constructor(defaultDelay) {\n    this.defaultDelay = defaultDelay;\n    this.deferred = null;\n    this.completionPromise = null;\n    this.doResolve = null;\n    this.doReject = null;\n    this.task = null;\n  }\n  trigger(task, delay = this.defaultDelay) {\n    this.task = task;\n    this.cancelTimeout();\n    if (!this.completionPromise) {\n      this.completionPromise = new Promise((resolve, reject) => {\n        this.doResolve = resolve;\n        this.doReject = reject;\n      }).then(() => {\n        this.completionPromise = null;\n        this.doResolve = null;\n        if (this.task) {\n          const task = this.task;\n          this.task = null;\n          return task();\n        }\n        return undefined;\n      });\n    }\n    const fn = () => {\n      var _a;\n      this.deferred = null;\n      (_a = this.doResolve) === null || _a === void 0 ? void 0 : _a.call(this, null);\n    };\n    this.deferred = delay === MicrotaskDelay ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);\n    return this.completionPromise;\n  }\n  isTriggered() {\n    var _a;\n    return !!((_a = this.deferred) === null || _a === void 0 ? void 0 : _a.isTriggered());\n  }\n  cancel() {\n    var _a;\n    this.cancelTimeout();\n    if (this.completionPromise) {\n      (_a = this.doReject) === null || _a === void 0 ? void 0 : _a.call(this, new CancellationError());\n      this.completionPromise = null;\n    }\n  }\n  cancelTimeout() {\n    var _a;\n    (_a = this.deferred) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.deferred = null;\n  }\n  dispose() {\n    this.cancel();\n  }\n}\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer {\n  constructor(defaultDelay) {\n    this.delayer = new Delayer(defaultDelay);\n    this.throttler = new Throttler();\n  }\n  trigger(promiseFactory, delay) {\n    return this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay);\n  }\n  cancel() {\n    this.delayer.cancel();\n  }\n  dispose() {\n    this.delayer.dispose();\n    this.throttler.dispose();\n  }\n}\nexport function timeout(millis, token) {\n  if (!token) {\n    return createCancelablePromise(token => timeout(millis, token));\n  }\n  return new Promise((resolve, reject) => {\n    const handle = setTimeout(() => {\n      disposable.dispose();\n      resolve();\n    }, millis);\n    const disposable = token.onCancellationRequested(() => {\n      clearTimeout(handle);\n      disposable.dispose();\n      reject(new CancellationError());\n    });\n  });\n}\n/**\n * Creates a timeout that can be disposed using its returned value.\n * @param handler The timeout handler.\n * @param timeout An optional timeout in milliseconds.\n * @param store An optional {@link DisposableStore} that will have the timeout disposable managed automatically.\n *\n * @example\n * const store = new DisposableStore;\n * // Call the timeout after 1000ms at which point it will be automatically\n * // evicted from the store.\n * const timeoutDisposable = disposableTimeout(() => {}, 1000, store);\n *\n * if (foo) {\n *   // Cancel the timeout and evict it from store.\n *   timeoutDisposable.dispose();\n * }\n */\nexport function disposableTimeout(handler, timeout = 0, store) {\n  const timer = setTimeout(() => {\n    handler();\n    if (store) {\n      disposable.dispose();\n    }\n  }, timeout);\n  const disposable = toDisposable(() => {\n    clearTimeout(timer);\n    store === null || store === void 0 ? void 0 : store.deleteAndLeak(disposable);\n  });\n  store === null || store === void 0 ? void 0 : store.add(disposable);\n  return disposable;\n}\nexport function first(promiseFactories, shouldStop = t => !!t, defaultValue = null) {\n  let index = 0;\n  const len = promiseFactories.length;\n  const loop = () => {\n    if (index >= len) {\n      return Promise.resolve(defaultValue);\n    }\n    const factory = promiseFactories[index++];\n    const promise = Promise.resolve(factory());\n    return promise.then(result => {\n      if (shouldStop(result)) {\n        return Promise.resolve(result);\n      }\n      return loop();\n    });\n  };\n  return loop();\n}\nexport class TimeoutTimer {\n  constructor(runner, timeout) {\n    this._isDisposed = false;\n    this._token = -1;\n    if (typeof runner === 'function' && typeof timeout === 'number') {\n      this.setIfNotSet(runner, timeout);\n    }\n  }\n  dispose() {\n    this.cancel();\n    this._isDisposed = true;\n  }\n  cancel() {\n    if (this._token !== -1) {\n      clearTimeout(this._token);\n      this._token = -1;\n    }\n  }\n  cancelAndSet(runner, timeout) {\n    if (this._isDisposed) {\n      throw new BugIndicatingError(`Calling 'cancelAndSet' on a disposed TimeoutTimer`);\n    }\n    this.cancel();\n    this._token = setTimeout(() => {\n      this._token = -1;\n      runner();\n    }, timeout);\n  }\n  setIfNotSet(runner, timeout) {\n    if (this._isDisposed) {\n      throw new BugIndicatingError(`Calling 'setIfNotSet' on a disposed TimeoutTimer`);\n    }\n    if (this._token !== -1) {\n      // timer is already set\n      return;\n    }\n    this._token = setTimeout(() => {\n      this._token = -1;\n      runner();\n    }, timeout);\n  }\n}\nexport class IntervalTimer {\n  constructor() {\n    this.disposable = undefined;\n    this.isDisposed = false;\n  }\n  cancel() {\n    var _a;\n    (_a = this.disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n    this.disposable = undefined;\n  }\n  cancelAndSet(runner, interval, context = globalThis) {\n    if (this.isDisposed) {\n      throw new BugIndicatingError(`Calling 'cancelAndSet' on a disposed IntervalTimer`);\n    }\n    this.cancel();\n    const handle = context.setInterval(() => {\n      runner();\n    }, interval);\n    this.disposable = toDisposable(() => {\n      context.clearInterval(handle);\n      this.disposable = undefined;\n    });\n  }\n  dispose() {\n    this.cancel();\n    this.isDisposed = true;\n  }\n}\nexport class RunOnceScheduler {\n  constructor(runner, delay) {\n    this.timeoutToken = -1;\n    this.runner = runner;\n    this.timeout = delay;\n    this.timeoutHandler = this.onTimeout.bind(this);\n  }\n  /**\n   * Dispose RunOnceScheduler\n   */\n  dispose() {\n    this.cancel();\n    this.runner = null;\n  }\n  /**\n   * Cancel current scheduled runner (if any).\n   */\n  cancel() {\n    if (this.isScheduled()) {\n      clearTimeout(this.timeoutToken);\n      this.timeoutToken = -1;\n    }\n  }\n  /**\n   * Cancel previous runner (if any) & schedule a new runner.\n   */\n  schedule(delay = this.timeout) {\n    this.cancel();\n    this.timeoutToken = setTimeout(this.timeoutHandler, delay);\n  }\n  get delay() {\n    return this.timeout;\n  }\n  set delay(value) {\n    this.timeout = value;\n  }\n  /**\n   * Returns true if scheduled.\n   */\n  isScheduled() {\n    return this.timeoutToken !== -1;\n  }\n  onTimeout() {\n    this.timeoutToken = -1;\n    if (this.runner) {\n      this.doRun();\n    }\n  }\n  doRun() {\n    var _a;\n    (_a = this.runner) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n}\n/**\n * Execute the callback the next time the browser is idle, returning an\n * {@link IDisposable} that will cancel the callback when disposed. This wraps\n * [requestIdleCallback] so it will fallback to [setTimeout] if the environment\n * doesn't support it.\n *\n * @param callback The callback to run when idle, this includes an\n * [IdleDeadline] that provides the time alloted for the idle callback by the\n * browser. Not respecting this deadline will result in a degraded user\n * experience.\n * @param timeout A timeout at which point to queue no longer wait for an idle\n * callback but queue it on the regular event loop (like setTimeout). Typically\n * this should not be used.\n *\n * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline\n * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout\n *\n * **Note** that there is `dom.ts#runWhenWindowIdle` which is better suited when running inside a browser\n * context\n */\nexport let runWhenGlobalIdle;\nexport let _runWhenIdle;\n(function () {\n  if (typeof globalThis.requestIdleCallback !== 'function' || typeof globalThis.cancelIdleCallback !== 'function') {\n    _runWhenIdle = (_targetWindow, runner) => {\n      setTimeout0(() => {\n        if (disposed) {\n          return;\n        }\n        const end = Date.now() + 15; // one frame at 64fps\n        const deadline = {\n          didTimeout: true,\n          timeRemaining() {\n            return Math.max(0, end - Date.now());\n          }\n        };\n        runner(Object.freeze(deadline));\n      });\n      let disposed = false;\n      return {\n        dispose() {\n          if (disposed) {\n            return;\n          }\n          disposed = true;\n        }\n      };\n    };\n  } else {\n    _runWhenIdle = (targetWindow, runner, timeout) => {\n      const handle = targetWindow.requestIdleCallback(runner, typeof timeout === 'number' ? {\n        timeout\n      } : undefined);\n      let disposed = false;\n      return {\n        dispose() {\n          if (disposed) {\n            return;\n          }\n          disposed = true;\n          targetWindow.cancelIdleCallback(handle);\n        }\n      };\n    };\n  }\n  runWhenGlobalIdle = runner => _runWhenIdle(globalThis, runner);\n})();\nexport class AbstractIdleValue {\n  constructor(targetWindow, executor) {\n    this._didRun = false;\n    this._executor = () => {\n      try {\n        this._value = executor();\n      } catch (err) {\n        this._error = err;\n      } finally {\n        this._didRun = true;\n      }\n    };\n    this._handle = _runWhenIdle(targetWindow, () => this._executor());\n  }\n  dispose() {\n    this._handle.dispose();\n  }\n  get value() {\n    if (!this._didRun) {\n      this._handle.dispose();\n      this._executor();\n    }\n    if (this._error) {\n      throw this._error;\n    }\n    return this._value;\n  }\n  get isInitialized() {\n    return this._didRun;\n  }\n}\n/**\n * An `IdleValue` that always uses the current window (which might be throttled or inactive)\n *\n * **Note** that there is `dom.ts#WindowIdleValue` which is better suited when running inside a browser\n * context\n */\nexport class GlobalIdleValue extends AbstractIdleValue {\n  constructor(executor) {\n    super(globalThis, executor);\n  }\n}\n/**\n * Creates a promise whose resolution or rejection can be controlled imperatively.\n */\nexport class DeferredPromise {\n  get isRejected() {\n    var _a;\n    return ((_a = this.outcome) === null || _a === void 0 ? void 0 : _a.outcome) === 1 /* DeferredOutcome.Rejected */;\n  }\n  get isSettled() {\n    return !!this.outcome;\n  }\n  constructor() {\n    this.p = new Promise((c, e) => {\n      this.completeCallback = c;\n      this.errorCallback = e;\n    });\n  }\n  complete(value) {\n    return new Promise(resolve => {\n      this.completeCallback(value);\n      this.outcome = {\n        outcome: 0 /* DeferredOutcome.Resolved */,\n        value\n      };\n      resolve();\n    });\n  }\n  error(err) {\n    return new Promise(resolve => {\n      this.errorCallback(err);\n      this.outcome = {\n        outcome: 1 /* DeferredOutcome.Rejected */,\n        value: err\n      };\n      resolve();\n    });\n  }\n  cancel() {\n    return this.error(new CancellationError());\n  }\n}\n//#endregion\n//#region Promises\nexport var Promises;\n(function (Promises) {\n  /**\n   * A drop-in replacement for `Promise.all` with the only difference\n   * that the method awaits every promise to either fulfill or reject.\n   *\n   * Similar to `Promise.all`, only the first error will be returned\n   * if any.\n   */\n  async function settled(promises) {\n    let firstError = undefined;\n    const result = await Promise.all(promises.map(promise => promise.then(value => value, error => {\n      if (!firstError) {\n        firstError = error;\n      }\n      return undefined; // do not rethrow so that other promises can settle\n    })));\n    if (typeof firstError !== 'undefined') {\n      throw firstError;\n    }\n    return result; // cast is needed and protected by the `throw` above\n  }\n  Promises.settled = settled;\n  /**\n   * A helper to create a new `Promise<T>` with a body that is a promise\n   * itself. By default, an error that raises from the async body will\n   * end up as a unhandled rejection, so this utility properly awaits the\n   * body and rejects the promise as a normal promise does without async\n   * body.\n   *\n   * This method should only be used in rare cases where otherwise `async`\n   * cannot be used (e.g. when callbacks are involved that require this).\n   */\n  function withAsyncBody(bodyFn) {\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n      try {\n        await bodyFn(resolve, reject);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  Promises.withAsyncBody = withAsyncBody;\n})(Promises || (Promises = {}));\n/**\n * A rich implementation for an `AsyncIterable<T>`.\n */\nexport class AsyncIterableObject {\n  static fromArray(items) {\n    return new AsyncIterableObject(writer => {\n      writer.emitMany(items);\n    });\n  }\n  static fromPromise(promise) {\n    return new AsyncIterableObject(async emitter => {\n      emitter.emitMany(await promise);\n    });\n  }\n  static fromPromises(promises) {\n    return new AsyncIterableObject(async emitter => {\n      await Promise.all(promises.map(async p => emitter.emitOne(await p)));\n    });\n  }\n  static merge(iterables) {\n    return new AsyncIterableObject(async emitter => {\n      await Promise.all(iterables.map(async iterable => {\n        for await (const item of iterable) {\n          emitter.emitOne(item);\n        }\n      }));\n    });\n  }\n  constructor(executor, onReturn) {\n    this._state = 0 /* AsyncIterableSourceState.Initial */;\n    this._results = [];\n    this._error = null;\n    this._onReturn = onReturn;\n    this._onStateChanged = new Emitter();\n    queueMicrotask(async () => {\n      const writer = {\n        emitOne: item => this.emitOne(item),\n        emitMany: items => this.emitMany(items),\n        reject: error => this.reject(error)\n      };\n      try {\n        await Promise.resolve(executor(writer));\n        this.resolve();\n      } catch (err) {\n        this.reject(err);\n      } finally {\n        writer.emitOne = undefined;\n        writer.emitMany = undefined;\n        writer.reject = undefined;\n      }\n    });\n  }\n  [Symbol.asyncIterator]() {\n    let i = 0;\n    return {\n      next: async () => {\n        do {\n          if (this._state === 2 /* AsyncIterableSourceState.DoneError */) {\n            throw this._error;\n          }\n          if (i < this._results.length) {\n            return {\n              done: false,\n              value: this._results[i++]\n            };\n          }\n          if (this._state === 1 /* AsyncIterableSourceState.DoneOK */) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          await Event.toPromise(this._onStateChanged.event);\n        } while (true);\n      },\n      return: async () => {\n        var _a;\n        (_a = this._onReturn) === null || _a === void 0 ? void 0 : _a.call(this);\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n  static map(iterable, mapFn) {\n    return new AsyncIterableObject(async emitter => {\n      for await (const item of iterable) {\n        emitter.emitOne(mapFn(item));\n      }\n    });\n  }\n  map(mapFn) {\n    return AsyncIterableObject.map(this, mapFn);\n  }\n  static filter(iterable, filterFn) {\n    return new AsyncIterableObject(async emitter => {\n      for await (const item of iterable) {\n        if (filterFn(item)) {\n          emitter.emitOne(item);\n        }\n      }\n    });\n  }\n  filter(filterFn) {\n    return AsyncIterableObject.filter(this, filterFn);\n  }\n  static coalesce(iterable) {\n    return AsyncIterableObject.filter(iterable, item => !!item);\n  }\n  coalesce() {\n    return AsyncIterableObject.coalesce(this);\n  }\n  static async toPromise(iterable) {\n    const result = [];\n    for await (const item of iterable) {\n      result.push(item);\n    }\n    return result;\n  }\n  toPromise() {\n    return AsyncIterableObject.toPromise(this);\n  }\n  /**\n   * The value will be appended at the end.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  emitOne(value) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    // it is important to add new values at the end,\n    // as we may have iterators already running on the array\n    this._results.push(value);\n    this._onStateChanged.fire();\n  }\n  /**\n   * The values will be appended at the end.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  emitMany(values) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    // it is important to add new values at the end,\n    // as we may have iterators already running on the array\n    this._results = this._results.concat(values);\n    this._onStateChanged.fire();\n  }\n  /**\n   * Calling `resolve()` will mark the result array as complete.\n   *\n   * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  resolve() {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    this._state = 1 /* AsyncIterableSourceState.DoneOK */;\n    this._onStateChanged.fire();\n  }\n  /**\n   * Writing an error will permanently invalidate this iterable.\n   * The current users will receive an error thrown, as will all future users.\n   *\n   * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n   */\n  reject(error) {\n    if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n      return;\n    }\n    this._state = 2 /* AsyncIterableSourceState.DoneError */;\n    this._error = error;\n    this._onStateChanged.fire();\n  }\n}\nAsyncIterableObject.EMPTY = AsyncIterableObject.fromArray([]);\nexport class CancelableAsyncIterableObject extends AsyncIterableObject {\n  constructor(_source, executor) {\n    super(executor);\n    this._source = _source;\n  }\n  cancel() {\n    this._source.cancel();\n  }\n}\nexport function createCancelableAsyncIterable(callback) {\n  const source = new CancellationTokenSource();\n  const innerIterable = callback(source.token);\n  return new CancelableAsyncIterableObject(source, async emitter => {\n    const subscription = source.token.onCancellationRequested(() => {\n      subscription.dispose();\n      source.dispose();\n      emitter.reject(new CancellationError());\n    });\n    try {\n      for await (const item of innerIterable) {\n        if (source.token.isCancellationRequested) {\n          // canceled in the meantime\n          return;\n        }\n        emitter.emitOne(item);\n      }\n      subscription.dispose();\n      source.dispose();\n    } catch (err) {\n      subscription.dispose();\n      source.dispose();\n      emitter.reject(err);\n    }\n  });\n}\n//#endregion","map":{"version":3,"names":["CancellationTokenSource","BugIndicatingError","CancellationError","Emitter","Event","toDisposable","setTimeout0","MicrotaskDelay","isThenable","obj","then","createCancelablePromise","callback","source","thenable","token","promise","Promise","resolve","reject","subscription","onCancellationRequested","dispose","value","err","cancel","catch","undefined","finally","onfinally","raceCancellation","defaultValue","ref","Throttler","constructor","isDisposed","activePromise","queuedPromise","queuedPromiseFactory","queue","promiseFactory","Error","onComplete","result","timeoutDeferred","timeout","fn","scheduled","handle","setTimeout","isTriggered","clearTimeout","microtaskDeferred","queueMicrotask","Delayer","defaultDelay","deferred","completionPromise","doResolve","doReject","task","trigger","delay","cancelTimeout","_a","call","ThrottledDelayer","delayer","throttler","millis","disposable","disposableTimeout","handler","store","timer","deleteAndLeak","add","first","promiseFactories","shouldStop","t","index","len","length","loop","factory","TimeoutTimer","runner","_isDisposed","_token","setIfNotSet","cancelAndSet","IntervalTimer","interval","context","globalThis","setInterval","clearInterval","RunOnceScheduler","timeoutToken","timeoutHandler","onTimeout","bind","isScheduled","schedule","doRun","runWhenGlobalIdle","_runWhenIdle","requestIdleCallback","cancelIdleCallback","_targetWindow","disposed","end","Date","now","deadline","didTimeout","timeRemaining","Math","max","Object","freeze","targetWindow","AbstractIdleValue","executor","_didRun","_executor","_value","_error","_handle","isInitialized","GlobalIdleValue","DeferredPromise","isRejected","outcome","isSettled","p","c","e","completeCallback","errorCallback","complete","error","Promises","settled","promises","firstError","all","map","withAsyncBody","bodyFn","AsyncIterableObject","fromArray","items","writer","emitMany","fromPromise","emitter","fromPromises","emitOne","merge","iterables","iterable","item","onReturn","_state","_results","_onReturn","_onStateChanged","Symbol","asyncIterator","i","next","done","toPromise","event","return","mapFn","filter","filterFn","coalesce","push","fire","values","concat","EMPTY","CancelableAsyncIterableObject","_source","createCancelableAsyncIterable","innerIterable","isCancellationRequested"],"sources":["/Users/sushmithajagannath/collaborative-code-editor/node_modules/monaco-editor/esm/vs/base/common/async.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from './cancellation.js';\nimport { BugIndicatingError, CancellationError } from './errors.js';\nimport { Emitter, Event } from './event.js';\nimport { toDisposable } from './lifecycle.js';\nimport { setTimeout0 } from './platform.js';\nimport { MicrotaskDelay } from './symbols.js';\nexport function isThenable(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\nexport function createCancelablePromise(callback) {\n    const source = new CancellationTokenSource();\n    const thenable = callback(source.token);\n    const promise = new Promise((resolve, reject) => {\n        const subscription = source.token.onCancellationRequested(() => {\n            subscription.dispose();\n            reject(new CancellationError());\n        });\n        Promise.resolve(thenable).then(value => {\n            subscription.dispose();\n            source.dispose();\n            resolve(value);\n        }, err => {\n            subscription.dispose();\n            source.dispose();\n            reject(err);\n        });\n    });\n    return new class {\n        cancel() {\n            source.cancel();\n            source.dispose();\n        }\n        then(resolve, reject) {\n            return promise.then(resolve, reject);\n        }\n        catch(reject) {\n            return this.then(undefined, reject);\n        }\n        finally(onfinally) {\n            return promise.finally(onfinally);\n        }\n    };\n}\nexport function raceCancellation(promise, token, defaultValue) {\n    return new Promise((resolve, reject) => {\n        const ref = token.onCancellationRequested(() => {\n            ref.dispose();\n            resolve(defaultValue);\n        });\n        promise.then(resolve, reject).finally(() => ref.dispose());\n    });\n}\n/**\n * A helper to prevent accumulation of sequential async tasks.\n *\n * Imagine a mail man with the sole task of delivering letters. As soon as\n * a letter submitted for delivery, he drives to the destination, delivers it\n * and returns to his base. Imagine that during the trip, N more letters were submitted.\n * When the mail man returns, he picks those N letters and delivers them all in a\n * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.\n *\n * The throttler implements this via the queue() method, by providing it a task\n * factory. Following the example:\n *\n * \t\tconst throttler = new Throttler();\n * \t\tconst letters = [];\n *\n * \t\tfunction deliver() {\n * \t\t\tconst lettersToDeliver = letters;\n * \t\t\tletters = [];\n * \t\t\treturn makeTheTrip(lettersToDeliver);\n * \t\t}\n *\n * \t\tfunction onLetterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tthrottler.queue(deliver);\n * \t\t}\n */\nexport class Throttler {\n    constructor() {\n        this.isDisposed = false;\n        this.activePromise = null;\n        this.queuedPromise = null;\n        this.queuedPromiseFactory = null;\n    }\n    queue(promiseFactory) {\n        if (this.isDisposed) {\n            return Promise.reject(new Error('Throttler is disposed'));\n        }\n        if (this.activePromise) {\n            this.queuedPromiseFactory = promiseFactory;\n            if (!this.queuedPromise) {\n                const onComplete = () => {\n                    this.queuedPromise = null;\n                    if (this.isDisposed) {\n                        return;\n                    }\n                    const result = this.queue(this.queuedPromiseFactory);\n                    this.queuedPromiseFactory = null;\n                    return result;\n                };\n                this.queuedPromise = new Promise(resolve => {\n                    this.activePromise.then(onComplete, onComplete).then(resolve);\n                });\n            }\n            return new Promise((resolve, reject) => {\n                this.queuedPromise.then(resolve, reject);\n            });\n        }\n        this.activePromise = promiseFactory();\n        return new Promise((resolve, reject) => {\n            this.activePromise.then((result) => {\n                this.activePromise = null;\n                resolve(result);\n            }, (err) => {\n                this.activePromise = null;\n                reject(err);\n            });\n        });\n    }\n    dispose() {\n        this.isDisposed = true;\n    }\n}\nconst timeoutDeferred = (timeout, fn) => {\n    let scheduled = true;\n    const handle = setTimeout(() => {\n        scheduled = false;\n        fn();\n    }, timeout);\n    return {\n        isTriggered: () => scheduled,\n        dispose: () => {\n            clearTimeout(handle);\n            scheduled = false;\n        },\n    };\n};\nconst microtaskDeferred = (fn) => {\n    let scheduled = true;\n    queueMicrotask(() => {\n        if (scheduled) {\n            scheduled = false;\n            fn();\n        }\n    });\n    return {\n        isTriggered: () => scheduled,\n        dispose: () => { scheduled = false; },\n    };\n};\n/**\n * A helper to delay (debounce) execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\nexport class Delayer {\n    constructor(defaultDelay) {\n        this.defaultDelay = defaultDelay;\n        this.deferred = null;\n        this.completionPromise = null;\n        this.doResolve = null;\n        this.doReject = null;\n        this.task = null;\n    }\n    trigger(task, delay = this.defaultDelay) {\n        this.task = task;\n        this.cancelTimeout();\n        if (!this.completionPromise) {\n            this.completionPromise = new Promise((resolve, reject) => {\n                this.doResolve = resolve;\n                this.doReject = reject;\n            }).then(() => {\n                this.completionPromise = null;\n                this.doResolve = null;\n                if (this.task) {\n                    const task = this.task;\n                    this.task = null;\n                    return task();\n                }\n                return undefined;\n            });\n        }\n        const fn = () => {\n            var _a;\n            this.deferred = null;\n            (_a = this.doResolve) === null || _a === void 0 ? void 0 : _a.call(this, null);\n        };\n        this.deferred = delay === MicrotaskDelay ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);\n        return this.completionPromise;\n    }\n    isTriggered() {\n        var _a;\n        return !!((_a = this.deferred) === null || _a === void 0 ? void 0 : _a.isTriggered());\n    }\n    cancel() {\n        var _a;\n        this.cancelTimeout();\n        if (this.completionPromise) {\n            (_a = this.doReject) === null || _a === void 0 ? void 0 : _a.call(this, new CancellationError());\n            this.completionPromise = null;\n        }\n    }\n    cancelTimeout() {\n        var _a;\n        (_a = this.deferred) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.deferred = null;\n    }\n    dispose() {\n        this.cancel();\n    }\n}\n/**\n * A helper to delay execution of a task that is being requested often, while\n * preventing accumulation of consecutive executions, while the task runs.\n *\n * The mail man is clever and waits for a certain amount of time, before going\n * out to deliver letters. While the mail man is going out, more letters arrive\n * and can only be delivered once he is back. Once he is back the mail man will\n * do one more trip to deliver the letters that have accumulated while he was out.\n */\nexport class ThrottledDelayer {\n    constructor(defaultDelay) {\n        this.delayer = new Delayer(defaultDelay);\n        this.throttler = new Throttler();\n    }\n    trigger(promiseFactory, delay) {\n        return this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay);\n    }\n    cancel() {\n        this.delayer.cancel();\n    }\n    dispose() {\n        this.delayer.dispose();\n        this.throttler.dispose();\n    }\n}\nexport function timeout(millis, token) {\n    if (!token) {\n        return createCancelablePromise(token => timeout(millis, token));\n    }\n    return new Promise((resolve, reject) => {\n        const handle = setTimeout(() => {\n            disposable.dispose();\n            resolve();\n        }, millis);\n        const disposable = token.onCancellationRequested(() => {\n            clearTimeout(handle);\n            disposable.dispose();\n            reject(new CancellationError());\n        });\n    });\n}\n/**\n * Creates a timeout that can be disposed using its returned value.\n * @param handler The timeout handler.\n * @param timeout An optional timeout in milliseconds.\n * @param store An optional {@link DisposableStore} that will have the timeout disposable managed automatically.\n *\n * @example\n * const store = new DisposableStore;\n * // Call the timeout after 1000ms at which point it will be automatically\n * // evicted from the store.\n * const timeoutDisposable = disposableTimeout(() => {}, 1000, store);\n *\n * if (foo) {\n *   // Cancel the timeout and evict it from store.\n *   timeoutDisposable.dispose();\n * }\n */\nexport function disposableTimeout(handler, timeout = 0, store) {\n    const timer = setTimeout(() => {\n        handler();\n        if (store) {\n            disposable.dispose();\n        }\n    }, timeout);\n    const disposable = toDisposable(() => {\n        clearTimeout(timer);\n        store === null || store === void 0 ? void 0 : store.deleteAndLeak(disposable);\n    });\n    store === null || store === void 0 ? void 0 : store.add(disposable);\n    return disposable;\n}\nexport function first(promiseFactories, shouldStop = t => !!t, defaultValue = null) {\n    let index = 0;\n    const len = promiseFactories.length;\n    const loop = () => {\n        if (index >= len) {\n            return Promise.resolve(defaultValue);\n        }\n        const factory = promiseFactories[index++];\n        const promise = Promise.resolve(factory());\n        return promise.then(result => {\n            if (shouldStop(result)) {\n                return Promise.resolve(result);\n            }\n            return loop();\n        });\n    };\n    return loop();\n}\nexport class TimeoutTimer {\n    constructor(runner, timeout) {\n        this._isDisposed = false;\n        this._token = -1;\n        if (typeof runner === 'function' && typeof timeout === 'number') {\n            this.setIfNotSet(runner, timeout);\n        }\n    }\n    dispose() {\n        this.cancel();\n        this._isDisposed = true;\n    }\n    cancel() {\n        if (this._token !== -1) {\n            clearTimeout(this._token);\n            this._token = -1;\n        }\n    }\n    cancelAndSet(runner, timeout) {\n        if (this._isDisposed) {\n            throw new BugIndicatingError(`Calling 'cancelAndSet' on a disposed TimeoutTimer`);\n        }\n        this.cancel();\n        this._token = setTimeout(() => {\n            this._token = -1;\n            runner();\n        }, timeout);\n    }\n    setIfNotSet(runner, timeout) {\n        if (this._isDisposed) {\n            throw new BugIndicatingError(`Calling 'setIfNotSet' on a disposed TimeoutTimer`);\n        }\n        if (this._token !== -1) {\n            // timer is already set\n            return;\n        }\n        this._token = setTimeout(() => {\n            this._token = -1;\n            runner();\n        }, timeout);\n    }\n}\nexport class IntervalTimer {\n    constructor() {\n        this.disposable = undefined;\n        this.isDisposed = false;\n    }\n    cancel() {\n        var _a;\n        (_a = this.disposable) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.disposable = undefined;\n    }\n    cancelAndSet(runner, interval, context = globalThis) {\n        if (this.isDisposed) {\n            throw new BugIndicatingError(`Calling 'cancelAndSet' on a disposed IntervalTimer`);\n        }\n        this.cancel();\n        const handle = context.setInterval(() => {\n            runner();\n        }, interval);\n        this.disposable = toDisposable(() => {\n            context.clearInterval(handle);\n            this.disposable = undefined;\n        });\n    }\n    dispose() {\n        this.cancel();\n        this.isDisposed = true;\n    }\n}\nexport class RunOnceScheduler {\n    constructor(runner, delay) {\n        this.timeoutToken = -1;\n        this.runner = runner;\n        this.timeout = delay;\n        this.timeoutHandler = this.onTimeout.bind(this);\n    }\n    /**\n     * Dispose RunOnceScheduler\n     */\n    dispose() {\n        this.cancel();\n        this.runner = null;\n    }\n    /**\n     * Cancel current scheduled runner (if any).\n     */\n    cancel() {\n        if (this.isScheduled()) {\n            clearTimeout(this.timeoutToken);\n            this.timeoutToken = -1;\n        }\n    }\n    /**\n     * Cancel previous runner (if any) & schedule a new runner.\n     */\n    schedule(delay = this.timeout) {\n        this.cancel();\n        this.timeoutToken = setTimeout(this.timeoutHandler, delay);\n    }\n    get delay() {\n        return this.timeout;\n    }\n    set delay(value) {\n        this.timeout = value;\n    }\n    /**\n     * Returns true if scheduled.\n     */\n    isScheduled() {\n        return this.timeoutToken !== -1;\n    }\n    onTimeout() {\n        this.timeoutToken = -1;\n        if (this.runner) {\n            this.doRun();\n        }\n    }\n    doRun() {\n        var _a;\n        (_a = this.runner) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n}\n/**\n * Execute the callback the next time the browser is idle, returning an\n * {@link IDisposable} that will cancel the callback when disposed. This wraps\n * [requestIdleCallback] so it will fallback to [setTimeout] if the environment\n * doesn't support it.\n *\n * @param callback The callback to run when idle, this includes an\n * [IdleDeadline] that provides the time alloted for the idle callback by the\n * browser. Not respecting this deadline will result in a degraded user\n * experience.\n * @param timeout A timeout at which point to queue no longer wait for an idle\n * callback but queue it on the regular event loop (like setTimeout). Typically\n * this should not be used.\n *\n * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline\n * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\n * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout\n *\n * **Note** that there is `dom.ts#runWhenWindowIdle` which is better suited when running inside a browser\n * context\n */\nexport let runWhenGlobalIdle;\nexport let _runWhenIdle;\n(function () {\n    if (typeof globalThis.requestIdleCallback !== 'function' || typeof globalThis.cancelIdleCallback !== 'function') {\n        _runWhenIdle = (_targetWindow, runner) => {\n            setTimeout0(() => {\n                if (disposed) {\n                    return;\n                }\n                const end = Date.now() + 15; // one frame at 64fps\n                const deadline = {\n                    didTimeout: true,\n                    timeRemaining() {\n                        return Math.max(0, end - Date.now());\n                    }\n                };\n                runner(Object.freeze(deadline));\n            });\n            let disposed = false;\n            return {\n                dispose() {\n                    if (disposed) {\n                        return;\n                    }\n                    disposed = true;\n                }\n            };\n        };\n    }\n    else {\n        _runWhenIdle = (targetWindow, runner, timeout) => {\n            const handle = targetWindow.requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);\n            let disposed = false;\n            return {\n                dispose() {\n                    if (disposed) {\n                        return;\n                    }\n                    disposed = true;\n                    targetWindow.cancelIdleCallback(handle);\n                }\n            };\n        };\n    }\n    runWhenGlobalIdle = (runner) => _runWhenIdle(globalThis, runner);\n})();\nexport class AbstractIdleValue {\n    constructor(targetWindow, executor) {\n        this._didRun = false;\n        this._executor = () => {\n            try {\n                this._value = executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        };\n        this._handle = _runWhenIdle(targetWindow, () => this._executor());\n    }\n    dispose() {\n        this._handle.dispose();\n    }\n    get value() {\n        if (!this._didRun) {\n            this._handle.dispose();\n            this._executor();\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    get isInitialized() {\n        return this._didRun;\n    }\n}\n/**\n * An `IdleValue` that always uses the current window (which might be throttled or inactive)\n *\n * **Note** that there is `dom.ts#WindowIdleValue` which is better suited when running inside a browser\n * context\n */\nexport class GlobalIdleValue extends AbstractIdleValue {\n    constructor(executor) {\n        super(globalThis, executor);\n    }\n}\n/**\n * Creates a promise whose resolution or rejection can be controlled imperatively.\n */\nexport class DeferredPromise {\n    get isRejected() {\n        var _a;\n        return ((_a = this.outcome) === null || _a === void 0 ? void 0 : _a.outcome) === 1 /* DeferredOutcome.Rejected */;\n    }\n    get isSettled() {\n        return !!this.outcome;\n    }\n    constructor() {\n        this.p = new Promise((c, e) => {\n            this.completeCallback = c;\n            this.errorCallback = e;\n        });\n    }\n    complete(value) {\n        return new Promise(resolve => {\n            this.completeCallback(value);\n            this.outcome = { outcome: 0 /* DeferredOutcome.Resolved */, value };\n            resolve();\n        });\n    }\n    error(err) {\n        return new Promise(resolve => {\n            this.errorCallback(err);\n            this.outcome = { outcome: 1 /* DeferredOutcome.Rejected */, value: err };\n            resolve();\n        });\n    }\n    cancel() {\n        return this.error(new CancellationError());\n    }\n}\n//#endregion\n//#region Promises\nexport var Promises;\n(function (Promises) {\n    /**\n     * A drop-in replacement for `Promise.all` with the only difference\n     * that the method awaits every promise to either fulfill or reject.\n     *\n     * Similar to `Promise.all`, only the first error will be returned\n     * if any.\n     */\n    async function settled(promises) {\n        let firstError = undefined;\n        const result = await Promise.all(promises.map(promise => promise.then(value => value, error => {\n            if (!firstError) {\n                firstError = error;\n            }\n            return undefined; // do not rethrow so that other promises can settle\n        })));\n        if (typeof firstError !== 'undefined') {\n            throw firstError;\n        }\n        return result; // cast is needed and protected by the `throw` above\n    }\n    Promises.settled = settled;\n    /**\n     * A helper to create a new `Promise<T>` with a body that is a promise\n     * itself. By default, an error that raises from the async body will\n     * end up as a unhandled rejection, so this utility properly awaits the\n     * body and rejects the promise as a normal promise does without async\n     * body.\n     *\n     * This method should only be used in rare cases where otherwise `async`\n     * cannot be used (e.g. when callbacks are involved that require this).\n     */\n    function withAsyncBody(bodyFn) {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            try {\n                await bodyFn(resolve, reject);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    Promises.withAsyncBody = withAsyncBody;\n})(Promises || (Promises = {}));\n/**\n * A rich implementation for an `AsyncIterable<T>`.\n */\nexport class AsyncIterableObject {\n    static fromArray(items) {\n        return new AsyncIterableObject((writer) => {\n            writer.emitMany(items);\n        });\n    }\n    static fromPromise(promise) {\n        return new AsyncIterableObject(async (emitter) => {\n            emitter.emitMany(await promise);\n        });\n    }\n    static fromPromises(promises) {\n        return new AsyncIterableObject(async (emitter) => {\n            await Promise.all(promises.map(async (p) => emitter.emitOne(await p)));\n        });\n    }\n    static merge(iterables) {\n        return new AsyncIterableObject(async (emitter) => {\n            await Promise.all(iterables.map(async (iterable) => {\n                for await (const item of iterable) {\n                    emitter.emitOne(item);\n                }\n            }));\n        });\n    }\n    constructor(executor, onReturn) {\n        this._state = 0 /* AsyncIterableSourceState.Initial */;\n        this._results = [];\n        this._error = null;\n        this._onReturn = onReturn;\n        this._onStateChanged = new Emitter();\n        queueMicrotask(async () => {\n            const writer = {\n                emitOne: (item) => this.emitOne(item),\n                emitMany: (items) => this.emitMany(items),\n                reject: (error) => this.reject(error)\n            };\n            try {\n                await Promise.resolve(executor(writer));\n                this.resolve();\n            }\n            catch (err) {\n                this.reject(err);\n            }\n            finally {\n                writer.emitOne = undefined;\n                writer.emitMany = undefined;\n                writer.reject = undefined;\n            }\n        });\n    }\n    [Symbol.asyncIterator]() {\n        let i = 0;\n        return {\n            next: async () => {\n                do {\n                    if (this._state === 2 /* AsyncIterableSourceState.DoneError */) {\n                        throw this._error;\n                    }\n                    if (i < this._results.length) {\n                        return { done: false, value: this._results[i++] };\n                    }\n                    if (this._state === 1 /* AsyncIterableSourceState.DoneOK */) {\n                        return { done: true, value: undefined };\n                    }\n                    await Event.toPromise(this._onStateChanged.event);\n                } while (true);\n            },\n            return: async () => {\n                var _a;\n                (_a = this._onReturn) === null || _a === void 0 ? void 0 : _a.call(this);\n                return { done: true, value: undefined };\n            }\n        };\n    }\n    static map(iterable, mapFn) {\n        return new AsyncIterableObject(async (emitter) => {\n            for await (const item of iterable) {\n                emitter.emitOne(mapFn(item));\n            }\n        });\n    }\n    map(mapFn) {\n        return AsyncIterableObject.map(this, mapFn);\n    }\n    static filter(iterable, filterFn) {\n        return new AsyncIterableObject(async (emitter) => {\n            for await (const item of iterable) {\n                if (filterFn(item)) {\n                    emitter.emitOne(item);\n                }\n            }\n        });\n    }\n    filter(filterFn) {\n        return AsyncIterableObject.filter(this, filterFn);\n    }\n    static coalesce(iterable) {\n        return AsyncIterableObject.filter(iterable, item => !!item);\n    }\n    coalesce() {\n        return AsyncIterableObject.coalesce(this);\n    }\n    static async toPromise(iterable) {\n        const result = [];\n        for await (const item of iterable) {\n            result.push(item);\n        }\n        return result;\n    }\n    toPromise() {\n        return AsyncIterableObject.toPromise(this);\n    }\n    /**\n     * The value will be appended at the end.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    emitOne(value) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        // it is important to add new values at the end,\n        // as we may have iterators already running on the array\n        this._results.push(value);\n        this._onStateChanged.fire();\n    }\n    /**\n     * The values will be appended at the end.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    emitMany(values) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        // it is important to add new values at the end,\n        // as we may have iterators already running on the array\n        this._results = this._results.concat(values);\n        this._onStateChanged.fire();\n    }\n    /**\n     * Calling `resolve()` will mark the result array as complete.\n     *\n     * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    resolve() {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        this._state = 1 /* AsyncIterableSourceState.DoneOK */;\n        this._onStateChanged.fire();\n    }\n    /**\n     * Writing an error will permanently invalidate this iterable.\n     * The current users will receive an error thrown, as will all future users.\n     *\n     * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.\n     */\n    reject(error) {\n        if (this._state !== 0 /* AsyncIterableSourceState.Initial */) {\n            return;\n        }\n        this._state = 2 /* AsyncIterableSourceState.DoneError */;\n        this._error = error;\n        this._onStateChanged.fire();\n    }\n}\nAsyncIterableObject.EMPTY = AsyncIterableObject.fromArray([]);\nexport class CancelableAsyncIterableObject extends AsyncIterableObject {\n    constructor(_source, executor) {\n        super(executor);\n        this._source = _source;\n    }\n    cancel() {\n        this._source.cancel();\n    }\n}\nexport function createCancelableAsyncIterable(callback) {\n    const source = new CancellationTokenSource();\n    const innerIterable = callback(source.token);\n    return new CancelableAsyncIterableObject(source, async (emitter) => {\n        const subscription = source.token.onCancellationRequested(() => {\n            subscription.dispose();\n            source.dispose();\n            emitter.reject(new CancellationError());\n        });\n        try {\n            for await (const item of innerIterable) {\n                if (source.token.isCancellationRequested) {\n                    // canceled in the meantime\n                    return;\n                }\n                emitter.emitOne(item);\n            }\n            subscription.dispose();\n            source.dispose();\n        }\n        catch (err) {\n            subscription.dispose();\n            source.dispose();\n            emitter.reject(err);\n        }\n    });\n}\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}